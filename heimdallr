#!/usr/bin/env ruby
#
# Name: heimdallr

=begin
Created by Ryan Klein (@ryanklein).

This application will add IP addresses and/or networks provided as an argument
or from a file to prefix-list on Juniper SRX firewalls with the intention of
blocking IP addresses at the interface. It is designed to solve a scaling
problem where rather than manually making changes to each firewall individually
it will push to all firewalls at the same time.
=end

=begin
Set our current version number
=end
VERSION = 1.0

=begin
Include the required libraries or produce an error if they do not exist in the
expected path.
=end
begin
  require 'net/netconf'
  require 'nokogiri'
  require 'io/console'
rescue LoadError => load_error
  puts("Cannot find '#{load_error.path}' library, please install it via Ruby gems and try again.")
  exit!
end

=begin
Method to evaluate the configuration file and return the value(s) for the parameter passed.
=end
def config_eval(parameter)
  @parameter = parameter
  $configuration = File.open($configuration, 'r')
  # Delete lines that start with a pound sign or a new line
  $configuration.readlines.each do |line|
    if line.start_with?(@parameter) == true then
      @key = line.split(":").collect{|a| a.strip}[0]
      @values = line.split(":").collect{|a| a.strip}[1].split(",").collect{|b| b.strip}
      @request = {@key.to_s => @values}
      return @request
    end
  end
end

=begin
Evaluate the options passed, print a help message if there are no options provided.
=end
if ARGV.empty? == true or ARGV.include?('--help') == true or ARGV.include?('-h') == true then
  puts("This application will push one or more IP addresses or networks to a prefix-list on Juniper SRX firewalls.")
  puts("")
  puts("Options:")
  puts("--config       Specify the location of the configuration file or use default (optional)")
  puts("--help         Display this help message")
  puts('')
  exit!
end

=begin
Ensure that the configuration file is properly loaded via an argument or the
default location.
=end
if ARGV.include?('--config') then
  $configuration = ARGV[(ARGV.index('--config').to_i + 1)]
else
  $configuration = '/etc/heimdallr/heimdallr.conf'
end

if File.exist?($configuration) == false && File.readable?($configuration) == false then
  puts("Unable to read the configuration file or the configuration file at #{$configuration} as it doesn't exist.")
  exit!
end

=begin

=end
begin
  firewalls = config_eval("firewalls")
  prefix_list = config_eval("prefix-list")
rescue

end
