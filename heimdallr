#!/usr/bin/env ruby
#
# Name: heimdallr

=begin
Created by Ryan Klein (@ryanklein).

This application will add IP addresses and/or networks provided as an argument
or from a file to prefix-list on Juniper SRX firewalls with the intention of
blocking IP addresses at the interface. It is designed to solve a scaling
problem where rather than manually making changes to each firewall individually
it will push to all firewalls at the same time.
=end

=begin
Set our current version number
=end
VERSION = 1.0

=begin
Include the required libraries or produce an error if they do not exist in the
expected path.
=end
begin
  require 'net/netconf'
  require 'nokogiri'
  require 'io/console'
  require 'ipaddress'
rescue LoadError => load_error
  puts("Cannot find '#{load_error.path}' library, please install it via Ruby gems and try again.")
  exit!
end

=begin
Method to evaluate the configuration file and return the value(s) for the parameter passed.
=end
def config_eval(parameter)
  @parameter = parameter
  $configuration = File.open($configuration, 'r')
  # Delete lines that start with a pound sign or a new line
  $configuration.readlines.each do |line|
    if line.start_with?(@parameter) == true then
      @key = line.split(":").collect{|a| a.strip}[0]
      @values = line.split(":").collect{|a| a.strip}[1].split(",").collect{|b| b.strip}
      @request = {:"#{@key.to_s}" => @values}
      return @request
    end
  end
end

=begin
Method to evaluate the IP addresses to ensure they are valid. It will return an array of valid IP addresses
=end
def ipaddress_eval(parameter)
  @parameter = parameter
  @ipaddresses = Array.new
  @parameter.split(',').each do |ipaddress|
    ipaddress = IPAddress::IPv4.new(ipaddress.strip)
    if ipaddress.ipv4? == true then
      @ipaddresses.push(ipaddress.to_string)
    end
  end
  return @ipaddresses
end

=begin
Evaluate the options passed, print a help message if there are no options provided.
=end
if ARGV.empty? == true or ARGV.include?('--help') == true or ARGV.include?('-h') == true then
  puts("This application will push one or more IP addresses or networks to a prefix-list on Juniper SRX firewalls.")
  puts("")
  puts("Options:")
  puts("--config       Specify the location of the configuration file or use default (optional)")
  puts("--username     Specify the username to authenticate as")
  puts("--ipaddress    A comma seperated list of IP addresses that should be added to the prefix-list (must be in quotes)")
  puts("--comment      Specify a comment to add to the commit (must be in quotes)")
  puts("--help         Display this help message")
  puts('')
  exit!
end

=begin
Ensure that the configuration file is properly loaded via an argument or the
default location.
=end
if ARGV.include?('--config') then
  $configuration = ARGV[(ARGV.index('--config').to_i + 1)]
else
  $configuration = '/etc/heimdallr/heimdallr.conf'
end

if File.exist?($configuration) == false && File.readable?($configuration) == false then
  puts("Unable to read the configuration file or the configuration file at #{$configuration} as it doesn't exist.")
  exit!
end

print("Please enter your TACACS password: "); password = STDIN.noecho(&:gets).chomp.strip
puts("\n")

firewalls = config_eval("firewalls")
prefix_list = config_eval("prefix-list-name")[:"prefix-list-name"][0]
username = ARGV[(ARGV.index('--username').to_i + 1)].downcase.strip
ipaddresses = ipaddress_eval(ARGV[(ARGV.index('--ipaddress').to_i + 1)])
comment = ARGV[(ARGV.index('--comment').to_i + 1)].strip

=begin
Build the XML configuration to be pushed to the firewalls.
=end
begin
  xml_config = Nokogiri::XML::Builder.new{|conf|
    conf.configuration{
      conf.send(:'policy-options'){
        conf.send(:'prefix-list'){
          conf.name("#{prefix_list}")
          # Iterate through each IP address in the array.
          ipaddresses.each do |ipaddress|
            conf.send(:'prefix-list-item'){
              conf.name("#{ipaddress.to_s}")
            }
          end
        }
      }
    }
  }
end

=begin
Loop through the firewalls and push the same XML scheme to all Juniper SRX firewalls.
=end
firewalls[:firewalls].each do |firewall|
  login = { :target => firewall, :username => username, :password => password}

  puts("Connecting to #{firewall}...")
  Netconf::SSH.new(login){ |c|
    target = 'candidate'
    begin
      rsp = c.rpc.lock target
      rsp = c.rpc.edit_config(xml_config)
      rsp = c.rpc.validate target
      if comment.empty? == true then
        rpc = c.rpc.commit_configuration(log: "#{commit_comment}")
      else
        rpc = c.rpc.commit_configuration
      end
      rpc = c.rpc.unlock target

    rescue Netconf::LockError => e
      puts "Lock error: #{e.inspect}"
    rescue Netconf::EditError => e
      puts "Edit error: #{e.inspect}"
    rescue Netconf::ValidateError => e
      puts "Validate error: #{e.inspect}"
    rescue Netconf::CommitError => e
      puts "Commit error: #{e.inspect}"
    rescue Netconf::RpcError => e
      puts "General RPC error: #{e.inspect}"
    else
      puts "Configuration committed to #{firewall}"
    end
  }
end
puts('')
